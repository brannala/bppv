{"version":3,"sources":["libs/treeUtils.js","components/Checkbox.js","components/Slide.js","components/Canvas.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","this","TREEROOT","SPNAMES","spaceFactor","heightFactor","space","maxHeight","scaleBar","Node","data","left","right","father","height","theta","index","circle","Circle","Indexer","assign","node","id","x","y","NewSpeciesOrder","treeList","ExtractSpeciesOrder","tNode","newickSt","currNode","push","tallestTreeScale","useCladogram","maxNameLength","circles","getMaxHeight","noTr","treeVec","h1","getTreeHeight","tree","Newtree","replace","p","newick","match","blsum","Number","j","k","length","makeEdge","z","context","lineWidth","lineJoin","beginPath","moveTo","lineTo","stroke","printNames","nameArray","currX","cY","i","textAlign","textBaseline","save","translate","rotate","Math","PI","fillText","restore","postOrder","brLng","showTheta","printTheta","drawRootTheta","drawOneTree","value","canvas","hF","treeFromNewick","width","initX","toPrecision","font","newickString","brLen","ctx","orderTag","getMaxLenSN","n","current","cumY","pos","order","parseFloat","max","sN","mLen","iD","measureText","branchTip","X","Y","message","clado","console","log","displayIndex","indexer","EnumerateTree","DrawIndex","drawIndexToCanvas","createCircle","radius","MaxNameLen","offset","arc","fillStyle","fill","strokeStyle","swapNodes","nodeId","Swap","InputNodeID","temp","redrawCurrentTree","Checkbox","props","className","type","checked","onChange","text","Slide","handleChange","event","setState","parseInt","target","state","arrowKeyChange","currTree","maxLen","receivedData","val","step","style","min","treeLength","React","Component","TreeUtils","require","Canvas","IntersectWithCircle","pow","init","pop","utils","Cladogram","DisplayTheta","RelScaling","onWindowResize","window","innerWidth","innerHeight","clearRect","DisplayIndex","runDisplayIndex","slideToNextTree","round","toggleIndexDisplay","swapCount","showSwapInstructions","relscale","saveAsPDF","imgData","toDataURL","pdf","jsPDF","addImage","toggleTheta","received","trees","relscal","currentTree","refs","getContext","addEventListener","e","clientX","offsetLeft","clientY","offsetTop","forEach","keyCode","preventDefault","slider","navigator","userAgent","toLowerCase","indexOf","refresh","display","ref","onClick","Home","handleUpload","ev","File","FileReader","FileList","Blob","reader","file","document","querySelector","files","onload","varifyInputFile","result","split","uploaded","currLen","past","forceUpdate","CurrFile","readAsText","alert","alterUpload","filetoLoad","f","FILE","alterRefresh","handleRefresh","logDiffLength","handleRelScalingChange","AbsScaling","handleCladogramChange","handleAbsScaling","inputVect","returnString","badInput","string","currFileLength","previousFileLen","paddingLeft","paddingTop","paddingRight","paddingBottom","isFireFox","autoComplete","App","Boolean","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.583b4a15.chunk.js","sourcesContent":["/* eslint-disable no-lone-blocks */\nfunction TreeUtils(){\n    // var treeString=\"empty\";\n    this.TREEROOT=null;\n    var SPNAMES=[];\n    var initX=40;\n    var initY=15; \n    // var scaleFactor=50;\n    var spaceFactor=50\n    var heightFactor=100;\n    // var heightToSpaceFactor=1;\n    var space=0;\n    // var treeVec = [];\n    // var aString=\"\";\n    // var treePos=\"\";\n    var maxHeight=0; \n    // var value=0;\n    var scaleBar=0.0;\n\n    this.tallestTreeScale=false;\n    this.useCladogram=false;\n    this.maxNameLength=0; \n    this.circles=[];\n\n\n    /////////////////// ORIGINAL ////////////////\n    function Node(data, left, right, father){\n        this.data = data;\n        this.left = left;\n        this.right = right;\n        this.father = father;\n        this.space = 0;\n        this.height = 0; \n        this.theta = 0;\n        this.index = -99;\n        this.circle = new Circle();\n        // this.show = show;\n    }\n\n    this.getMaxHeight = (noTr, treeVec) => {\n        maxHeight=0;\n        for(let y=0; y<noTr; y++){\n            let h1 = this.getTreeHeight(treeVec[y]);\n            if(h1 > maxHeight){\n                maxHeight = h1;\n            }\n        }\n    }\n\n    this.getTreeHeight = (tree) => {\n        // strip all thetas out of tree\n        var Newtree = tree.replace(/(#\\d.\\d+)([eE](\\+|-)?[0-9]+)?/g,\"\");\n        // count opening parenthese until first tip taxa is encountered\n        var p=0;\n        while(Newtree[p]===\"(\"){\n            p++;\n        }\n        // strip all leading \"(\"s out of tree\n        Newtree = Newtree.replace(/\\(+/,\"\");\n        // put elements of tree into a vector\n        var newick=Newtree.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(,)/g); // ([eE][-+]?[0-9]+)?) /g);\n        // get tree height\n        var blsum=0;\n        if (!newick){\n            return;\n        }\n        blsum += Number(newick[1]); \n        var j=0;\n        for(var k=2; k<newick.length; k++){\n            if(newick[k]===\"(\"){\n                j++;\n            }\n            else if ((newick[k]===\")\")&&(j===0)&&(p>1)) {\n                blsum += Number(newick[k+1]); p--;\n            }\n            else if ((newick[k]===\")\")&&(j>0)) {\n                j--;\n            }\n        }\n        return blsum;\n    }\n\n    this.makeEdge = (x,y,z,context) => {\n        context.lineWidth = 3;\n        context.lineJoin = 'round';\n        context.beginPath();\n        context.moveTo(x,y);\n        context.lineTo(x,z);\n        context.stroke();\n    }\n\n    this.printNames = (nameArray, context) => {\n        let currX=initX+spaceFactor;\n        let cY=initY+this.maxNameLength -12;\n\n        for (let i=0; i<nameArray.length;i++){\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            context.translate(currX,cY);\n            context.rotate(Math.PI*(3/2));\t\n            context.fillText(nameArray[i],0,0);\n            context.restore();\n\t        currX+=spaceFactor;\n        }\n    } \n\n    this.postOrder = (node, context, brLng, showTheta) => {\n        if (!brLng){ // is a cladogram with no branch lengths\n            if(node === null){\n                return; \n            }\n            if(node.left !== null){\n                // console.log(\"going left\");\n                this.postOrder(node.left, context, false, showTheta);\n            }\n            if(node.right !== null){\n                // console.log(\"goin right\");\n                this.postOrder(node.right, context, false, showTheta);\n            } \n            if((node.left == null)&&(node.right == null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                if(showTheta)\n                    this.printTheta( node.space+initX, node.height*heightFactor+initY+this.maxNameLength, node, context );\n                this.makeEdge(node.space+initX, node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n            }\n            else {\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                if(node.father != null){\n                    if(showTheta)\n                        this.printTheta(node.space+initX,node.height*heightFactor+initY+this.maxNameLength, node, context)\n                    this.makeEdge(node.space+initX,node.height*heightFactor+initY+this.maxNameLength,node.father.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else{\n                    if(showTheta)\n                        this.drawRootTheta(node, context, node.theta, true);\n                }\n            }\n        }\n        else if(brLng){\n            if(node === null){\n                return;\n            }\n            if(node.left != null){\n                this.postOrder(node.left, context, true, showTheta);\n            }\n            if(node.right != null){\n                this.postOrder(node.right, context, true, showTheta);\n            }\n            if((node.left === null)&&(node.right === null)){\n                // drawing the tips of the tree \n                space+=spaceFactor;\n                node.space=space;\n                if(showTheta)\n                    this.printTheta( node.space+initX, initY+this.maxNameLength, node, context, true);\n                this.makeEdge( node.space+initX, initY+this.maxNameLength, node.height*heightFactor+initY+this.maxNameLength, context);\n            }\n            else {\n                // non-tip nodes\n                node.space = (node.left.space + node.right.space)/2;\n                context.lineWidth = 2;\n                context.lineJoin = 'round';\n                // horizontal lines\n                context.beginPath();\n                context.moveTo(node.left.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.lineTo(node.right.space+initX,node.right.height*heightFactor+initY+this.maxNameLength);\n                context.stroke();\n                if(node.father != null){\n                    if(showTheta)\n                        this.printTheta(node.space+initX, node.right.height*heightFactor+initY+this.maxNameLength, node, context );\n                    this.makeEdge(node.space+initX,node.right.height*heightFactor+initY+this.maxNameLength,node.height*heightFactor+initY+this.maxNameLength,context);\n                }\n                else if(showTheta){\n                    this.drawRootTheta(node, context, node.theta, false);\n                }\n            }\n        }\n    }\n\n    this.drawOneTree = (value, treeVec, useCladogram, showTheta, canvas, context, tallestTreeScale, hF) => {   \n        if(value < treeVec.length){\n            // 1 - make tree structure from input text \n            if(!useCladogram){\n                this.treeFromNewick(treeVec[value],true, context);\n            }\n            else{\n                this.treeFromNewick(treeVec[value],false, context);\n            }\n        \n            // 2 \n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/this.TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/this.TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(SPNAMES,context);\n            if(!useCladogram){\n                this.postOrder(this.TREEROOT,context,true, showTheta);\n            }\n            else{\n                this.postOrder(this.TREEROOT,context,false, showTheta);\n            }\n        }\n    }\n\n    this.treeFromNewick = (newickString,brLen,ctx) => {\n        var orderTag = 0;\n        if(!brLen){\n            let height = newickString.match(/(,)/g).length;\n            // overwrite input string \n            newickString = newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            SPNAMES = newickString.match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            let newick = newickString.match(/([A-Za-z]+)|(\\()|(\\))|(,)|([#]\\d+\\.\\d+)/g);\n\n            let n = new Node(\"root\", null, null, null);\n            n.height = height\n            this.TREEROOT = n;\n            let current = this.TREEROOT;\n            current.height=0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                            current.left = n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                            current = current.father;\n                            current.right=n;\n                            n.father = current;\n                            current = n;\n                        break;\n                    case \")\":\n                        // back\n                            current = current.father;\n                            current.height=Math.max(current.right.height,current.left.height)+1;\n                        break;\n                    default:\n                        if(newick[pos].match(/([#]\\d+\\.\\d+)/g)){\n                            current.theta = newick[pos];\n                            current.order = orderTag;\n                        }\n                        else{\n                            current.data = newick[pos];\n                            current.height = 0;\n                        }\n                        break;\n                    }\n                orderTag+=1;\n\t        }\n\t        this.TREEROOT.height=Math.max(current.right.height,current.left.height)+1;\n        }\n        else if(brLen){\n            SPNAMES = newickString.replace(/(#\\d+\\.\\d+)|(\\d+\\.\\d+)/g,\"\").replace(/e-\\d+/g,\"\").replace(/:/g,\"\").match(/(?=\\D)(\\w+)/g);\n            this.getMaxLenSN(SPNAMES, ctx);\n            newickString=newickString.replace(/e-\\d+/g,\"\").replace(/:/g,\"\");\n            let newick=newickString.match(/((\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?)|(\\w+)|(\\()|(\\))|(,)|([#]\\d+\\.\\d+)/g); \n            let n = new Node(\"root\", null, null, null, null, null, null);\n            this.TREEROOT = n;\n            let current = this.TREEROOT;\n            let cumY=0.0;\n            for(let pos = 0; pos < newick.length; pos++){\n                if((newick[pos] === \"(\")||(newick[pos]===\",\")){\n                    n = new Node(\"empty\", null, null, null, null, null, null);\n                }\n                switch(newick[pos]) {\n                    case \"(\":\n                        // up left\n                        current.left = n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \",\":\n                        // back then right\n                        current = current.father;\n                        current.right=n;\n                        n.father = current;\n                        current = n;\n                        break;\n                    case \")\":\n                        // back\n                        cumY = current.height;\n                        current = current.father;\n                        break;\n                    case \";\":\n                        // at end\n                        break;\n                    default:\n                        current.order = orderTag;\n                        if( (newick[pos].match(/(\\+|-)?([0-9]+\\.[0-9]*|\\.[0-9]+)([eE](\\+|-)?[0-9]+)?/) !=null) && (newick[pos].match(/([#]\\d+\\.\\d+)/) == null) ) {\n                            current.height = parseFloat(newick[pos])+cumY;\n                        }\n                        else if(newick[pos].match(/([#]\\d+\\.\\d+)/)){\n                            current.theta = newick[pos];\n                        }\n                        else{\n                            current.data = newick[pos];\n                            cumY=0.0;\n                        }\n                        break;\n                }\n            }    \n        }\n    }\n\n    this.getMaxLenSN = (sN, context) => {\n        let mLen = 0;\n        let iD = 0;\n\n        for(let i=0; i<sN.length; i++){\n            if(sN[i].length > mLen){\n                mLen = sN[i].length;\n                iD = i;\n            }\n            context.font = \"italic bold 16px serif\";\n            this.maxNameLength=context.measureText(sN[iD]).width;\n        }\n    }\n\n    ////////////// ADD ONS ///////////////\n    this.printTheta = (x,y,node,context,branchTip) =>{\n        if(node && node.theta){\n            // console.log(node.order)\n            context.textAlign='start';\n            context.textBaseline='middle';\n            context.save();\n            let X = x-70;\n            let Y = y+15;\n            context.translate(X, Y);\n            let message = node.theta.replace(/[#]/,\"\");\n            context.fillText(message,0,0);\n            context.restore();\n        }\n    } \n\n    this.drawRootTheta = (node, context, message, clado) => {\n        if(message){\n            if(!clado){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+this.maxNameLength;\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore();\n            }\n            else{\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.height*heightFactor+initY+this.maxNameLength\n                context.save();\n                context.translate(x,y+10);\n                message = message.replace(/[#]/,\"\");\n                context.fillText(message,0,0);\n                context.restore()\n            }\n        }\n        else{\n            console.log(\"bad\");\n        }\n    }\n\n    this.displayIndex = (brLen, context) =>{\n        if(this.circles.length === 0){\n            if(this.TREEROOT){\n                var indexer = new Indexer();\n                EnumerateTree(this.TREEROOT,indexer);\n                this.DrawIndex(this.TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n        else{\n            if(this.TREEROOT){\n                this.circles =[];\n                this.DrawIndex(this.TREEROOT, brLen, context, this.maxNameLength);\n            }\n        }\n    }\n\n    this.DrawIndex = (node, brLen, context, maxNameLength) => {\n        if(node === null){\n            return;\n        }\n        if((node.left !== null) && (node.right!==null)){\n            if(brLen){\n                this.drawIndexToCanvas( node.space+initX, node.right.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }else{\n                this.drawIndexToCanvas( node.space+initX, node.height*heightFactor+initY, maxNameLength, node, context, brLen);\n            }\n        }\n        if(node.left !== null){ \n            this.DrawIndex(node.left, brLen, context, maxNameLength);\n        }\n        if(node.right !== null){\n            this.DrawIndex(node.right, brLen, context, maxNameLength);\n        }\n    }\n\n    this.createCircle = (x, y, radius, id) => {\n        this.circles.push({x: x, y: y, radius: radius, id: id});\n    }\n\n    this.drawIndexToCanvas = (x, y, MaxNameLen ,node, context, brLen) => {\n        var radius = 15;\n\n        var offset=0;\n        if(!brLen && node.theta)\n            offset = 30;\n        else if(!brLen && !node.theta)\n            offset = 50\n        \n        if(node.father === null){\n            if(brLen){ //if not cladogram\n\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+MaxNameLen;\n\n                context.save();\n                context.beginPath();\n                this.createCircle(x, y+offset, radius, node.index);\n                context.arc(x, y+offset, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n\n                context.translate(x-4, y);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n            else{\n                context.save();\n                context.beginPath();\n                this.createCircle(x, y+offset, radius, node.index);\n                context.arc(x, y+offset, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n\n                context.translate(x-4, y+offset);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index,0,0);\n                context.restore();\n            }\n        }\n        else{\n            context.textAlign='start';\n            context.textBaseline='middle'; \n            context.save();\n            context.beginPath();\n            if(!this.useCladogram){\n                let x = (node.left.space+node.right.space)/2+initX;\n                let y = node.right.height*heightFactor+initY+MaxNameLen;\n                this.createCircle(x, y+offset, radius, node.index);\n                context.arc(x, y+offset, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n                context.translate(x-4, y+offset);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index, 0, 0);\n                context.restore();\n            }else{\n                this.createCircle(x, y+offset, radius, node.index);\n                context.arc(x, y+offset, radius, 0, 2*Math.PI, false);\n                context.fillStyle = '#4a4a4a';\n                context.fill();\n                context.lineWidth = 3;\n                context.strokeStyle = '#000000';\n                context.stroke();\n                context.translate(x-4, y+offset);\n                context.fillStyle = '#ffffff';\n                context.fillText(node.index, 0, 0);\n                context.restore();\n            }  \n        }\n    }\n\n    this.swapNodes = (nodeId, useCladogram, showTheta, canvas, context, tallestTreeScale, hF) => {\n        if(this.TREEROOT){\n            Swap(this.TREEROOT,nodeId);\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/this.TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/this.TREEROOT.height;\n            }\n            // draw scale bar at left\n            // if(value==0)\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(NewSpeciesOrder(this.TREEROOT), context);\n            if(!useCladogram){\n                this.postOrder(this.TREEROOT,context,true, showTheta);\n            }\n            else{\n                this.postOrder(this.TREEROOT,context,false, showTheta);\n            }\n        }\n    }\n    \n    this.redrawCurrentTree = (useCladogram, showTheta, canvas, context, tallestTreeScale, hF) => {\n        if(this.TREEROOT){\n            spaceFactor = (canvas.width-initX)*0.9/SPNAMES.length;\n            space=0;\n            if(!useCladogram){\n                if(tallestTreeScale){\n                    heightFactor=hF/maxHeight;\n\n                }\n                else{\n                    heightFactor=hF/this.TREEROOT.left.height;\n                }\n            }\n            else {\n                heightFactor=hF/this.TREEROOT.height;\n            }\n            // draw scale bar at left\n            if(!useCladogram){\n                scaleBar=30.0/heightFactor;\n                this.makeEdge(initX-40,initY+this.maxNameLength,initY+this.maxNameLength+scaleBar*heightFactor,context); // vertical side bar \n                context.font = \"italic bold 16px serif\";\n                context.fillText(scaleBar.toPrecision(1),initX-35,initY+this.maxNameLength+scaleBar*heightFactor);\n            }\n        \n            context.font = \"italic bold 16px serif\";\n            this.printNames(NewSpeciesOrder(this.TREEROOT), context);\n            if(!useCladogram){\n                this.postOrder(this.TREEROOT,context,true, showTheta);\n            }\n            else{\n                this.postOrder(this.TREEROOT,context,false, showTheta);\n            }\n        }\n    }\n\n    function Indexer(){\n        this.index = 0;\n        this.assign = (node) =>{\n            node.index = this.index;\n            node.circle.id = this.index;\n            this.index++;\n        }\n    }\n\n    function Circle(){\n        this.id = 0;\n        this.x = 0;\n        this.y = 0;\n    }\n\n    function ExtractSpeciesOrder(tNode, newickSt){\n        // Call after altering a tree \n        // Recursively traverse tree to get new Species name order\n        if(tNode === null){\n            return;\n        }\n        var currNode = tNode;\n        if(currNode.left !== null){\n            ExtractSpeciesOrder(currNode.left, newickSt);\n        }\n        if(currNode.right !== null){\n            ExtractSpeciesOrder(currNode.right, newickSt);\n        }\n        if((currNode.left === null) && (currNode.right === null)){\n            newickSt.push(tNode.data);\n        }\n    }\n\n    function EnumerateTree(node,indexer){\n        if(node === null){\n            return;\n        }\n        if((node.left !== null) && (node.right!==null)){\n            indexer.assign(node);\n        }\n\n        if(node.left !== null){\n            EnumerateTree(node.left, indexer);\n        }\n        \n        if(node.right !== null){\n            EnumerateTree(node.right, indexer)\n        }\n    }\n\n    function Swap(node,InputNodeID){\n        if(node === null){\n            return;\n        }\n        if(node.index === InputNodeID){\n            if(node.left && node.right){\n                let temp = node.left;\n                node.left = node.right;\n                node.right = temp;\n            }\n        }\n        if(node.left !== null){\n            Swap(node.left, InputNodeID);\n        }\n        if(node.right !== null){ \n            Swap(node.right, InputNodeID);\n        }\n    }\n\n    function NewSpeciesOrder(node){\n        var treeList =[]\n        ExtractSpeciesOrder(node,treeList);\n        return treeList;\n    }\n}\n    \nmodule.exports = TreeUtils;","//@flow\nimport * as React from 'react'\n\ntype Props = { \n    text:string,\n    checked:boolean,\n    onChange:boolean\n}\n\nconst Checkbox = (props: Props) => (\n    <label className=\"check-label\">\n        <input type='checkbox' checked={props.checked} onChange={props.onChange}/>\n        <span className=\"checkmark\"></span>\n        <span className=\"check-custom\">{props.text}</span>\n    </label>\n)\n\n\nexport default Checkbox; ","import React from 'react'\n\nclass Slide extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.currTree,\n            maxLen: 0,\n            receivedData: false\n        }\n        this.val=this.props.currTree;\n        this.step=50;\n    }\n  \n    handleChange = (event) => {\n      this.setState( { value : parseInt(event.target.value,10)});\n      this.onChange(this.state.value);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n      return {\n        maxLen : props.treeLength,\n        receivedData : props.receivedData\n      }\n    }\n\n    onChange = (i) => {\n      this.props.onChange(i);\n      // console.log(this.state.maxLen)\n    }\n\n    componentDidUpdate(){\n      if(this.state.receivedData){\n        // console.log(\"new file \")\n      }\n    }\n\n    componentDidMount(){\n      this.setState({value:0});\n    }\n\n    arrowKeyChange = (i) =>{\n      this.setState({\n        value: i\n      })\n    }\n\n  render() {\n    return (\n      <div>\n        <label>\n          <div style={{textAlign:'right'}}>\n            {this.state.receivedData? (<div>{`${this.state.value}/${this.state.maxLen-1}`}</div>) : (<div>0/0</div>)}\n          </div>\n          <input \n            className=\"slider\"\n            id=\"typeinp\" \n            type=\"range\" \n            min=\"0\" max={(this.state.maxLen-1)} \n            value={this.state.value} \n            onChange={this.handleChange}\n            step={1}/>\n        </label>\n      </div>\n    );\n  }\n}\n\n/* The step of this slider might cause app to slow down when dragging quickly */\n\nexport default Slide;","import React from 'react'\n// import Slider from './Slider';\n// import Slider from 'react-rangeslider'\n// import TreeSlider from './Slider3'\nimport Checkbox from \"./Checkbox\"\nimport jsPDF from 'jspdf';\nimport Slide from './Slide';\n// import TreeUtils from '../libs/treeUtils'\n\nvar TreeUtils = require('../libs/treeUtils');\n\nclass Canvas extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            receivedData : this.props.received,\n            treeVec : this.props.trees,\n            tallestTreeScale : false,\n            useCladogram : false,\n            maxNameLength : 0,\n            RelScaling : this.props.relscal,\n            Cladogram : this.props.clado,\n            currTree: 0,\n            DisplayTheta:false\n        };\n        this.currentTree = 0;\n        this.utils = new TreeUtils(); // make a global \n        this.DisplayIndex = false;\n        this.swapCount=0;\n        this.DisplayTheta=false \n    }\n    // update local state from props changes \n    static getDerivedStateFromProps(props, state) {\n        return {\n            receivedData: props.received, \n            treeVec : props.trees, // already split by \"/n\"\n            RelScaling : props.relscal,\n            Cladogram : props.clado\n        };\n    }\n\n    componentDidMount(){\n        this.canvas = this.refs.canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.ctx.save();\n        this.ctx.font =\"italic 25px serif\";\n        this.ctx.fillText(\"Please select input file\", (this.canvas.width-280)/2 , this.canvas.height/2);\n        this.ctx.restore();\n        // resize\n        window.addEventListener('resize', this.onWindowResize, false); \n\n        // window \n        this.canvas.addEventListener('click', (e)=> {\n            if(this.utils.circles.length > 0){\n                const pos = {\n                    x: e.clientX-this.ctx.canvas.offsetLeft,\n                    y: e.clientY-this.ctx.canvas.offsetTop\n                }\n                this.utils.circles.forEach( circle => {\n                    if(this.IntersectWithCircle(pos, circle)){\n                        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n                        this.utils.swapNodes(circle.id, this.state.Cladogram, this.DisplayTheta, this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n                        if(this.DisplayIndex){\n                            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n                        }\n                    }\n                });\n            }\n        });\n        // get init state for utils global scale \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n\n        window.addEventListener(\"keydown\", e => {\n            if(this.utils.TREEROOT){\n                // console.log(this.state.currTree)\n                if(e.keyCode === 37){  //left arrow \n                    e.preventDefault();\n                    if(this.state.currTree > 0){\n                        this.setState({currTree: this.state.currTree-1})\n                        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n                        this.utils.drawOneTree(this.state.currTree,this.state.treeVec, this.state.Cladogram, this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n                        this.refs.slider.arrowKeyChange(this.state.currTree);\n                    }\n                }\n                else if(e.keyCode === 39){ //right arrow\n                    e.preventDefault();\n                    if(this.state.currTree < this.state.treeVec.length-1){\n                        this.setState({currTree: this.state.currTree+1})\n                        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n                        this.utils.drawOneTree(this.state.currTree,this.state.treeVec, this.state.Cladogram, this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n                        this.refs.slider.arrowKeyChange(this.state.currTree);\n                    }\n                }\n            }\n        });\n\n        // if using firefox \n        if(navigator.userAgent.toLowerCase().indexOf('firefox') > -1){\n            this.refs.refresh.style.display = 'none'\n        }\n    }\n\n    IntersectWithCircle = (pos, circle) => {\n        return Math.pow(pos.x-circle.x,2)+Math.pow(pos.y-circle.y,2) < Math.pow(circle.radius,2); \n    }\n    \n    // called everytime there is a change to state -> triggered by getDerivedStates -> triggered by any relative prop changes\n    componentDidUpdate(){\n        if(this.state.receivedData === true){\n            this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n            this.init();\n        }\n\n        if(this.DisplayIndex){\n            this.DisplayIndex = !this.DisplayIndex;\n            this.utils.circles =[];\n        }\n\n        // update utils gloabl vars -> maybe there is a ore elegant way to do this \n        this.utils.tallestTreeScale = this.state.RelScaling;\n        this.utils.useCladogram = this.state.Cladogram;\n    }\n\n    // Will only be called when we receive new data \n    init = () => {\n        /////////\n        if(this.state.treeVec[this.state.treeVec.length-2].match(\";\") === null){\n            this.treeVec.pop();\n        }\n        // Draw first tree  \n        /////////\n        let noTr = this.state.treeVec.length;\n        this.utils.getMaxHeight(noTr, this.state.treeVec);\n        this.utils.drawOneTree(this.state.currTree,this.state.treeVec, this.state.Cladogram,this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    onWindowResize = () => {\n        this.ctx.canvas.width = window.innerWidth;\n        this.ctx.canvas.height = window.innerHeight*0.8;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        // need function to redraw tree instead\n        this.utils.redrawCurrentTree(this.state.Cladogram, this.DisplayTheta, this.canvas, this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n        }\n    }\n    // NOTE: hF = this.ctx.height*0.9-this.maxNameLength\n    slideToNextTree = (i) => {\n        this.DisplayIndex = false;\n        let index = Math.round(i);\n        this.setState({currTree : index});\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        this.utils.drawOneTree(index, this.state.treeVec, this.state.Cladogram, this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n    }\n\n    toggleIndexDisplay = () => {\n        this.swapCount=0;\n        this.utils.circles = [];\n        this.DisplayIndex = !this.DisplayIndex;\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        this.utils.redrawCurrentTree(this.state.Cladogram, this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n            this.showSwapInstructions(this.ctx);\n        }\n    }\n\n    showSwapInstructions = (context) => {\n        if(this.utils.circles.length > 0){\n            context.save();\n            context.translate(0,context.canvas.height-20);\n            context.fillText(\"Instruction:\\nClick on any node bubbles\\non the screen to swap its associated branches \",0,0);\n            context.restore();\n        }\n    }\n\n    runDisplayIndex = (clado, relscale, context) => {\n        //only show instructions for the first three swaps\n        if(this.swapCount <3){\n            this.showSwapInstructions(this.ctx);\n        }\n        if(clado){\n            this.utils.displayIndex(false, context);\n        }\n        else if(relscale){\n            this.utils.displayIndex(true, context);\n        }\n        else{\n            this.utils.displayIndex(true, context);\n        }\n        this.swapCount++;\n    }\n\n    saveAsPDF = () => {\n        // clear node circles from canvas \n        if(this.DisplayIndex){\n            this.toggleIndexDisplay();\n        }\n        var imgData = this.canvas.toDataURL();\n        var pdf = new jsPDF();\n        pdf.addImage(imgData, 'JPEG', 10, -145, 300, 150, null, null, -90);\n        pdf.save(\"download.pdf\");\n    }\n\n    toggleTheta = () => {\n        this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n        this.setState({DisplayTheta:!this.state.DisplayTheta});\n        this.DisplayTheta = !this.DisplayTheta;\n        this.utils.redrawCurrentTree(this.state.Cladogram, this.DisplayTheta, this.canvas,this.ctx, this.state.RelScaling, this.ctx.canvas.height*0.9-this.utils.maxNameLength);\n        if(this.DisplayIndex){\n            this.runDisplayIndex(this.state.Cladogram, this.state.RelScaling, this.ctx);\n        }\n    }\n\n    render(){\n        let{ currTree, treeVec } = this.state;\n        return(\n            <div>\n                <canvas ref=\"canvas\" width={window.innerWidth} height={(window.innerHeight*0.75)} />\n                <Slide ref=\"slider\" receivedData={this.state.receivedData} currTree={currTree} onChange={value => this.slideToNextTree(value)} treeLength={treeVec.length}/>\n                <div className=\"display-save-group\">\n                    <button className=\"display-btn\" onClick={this.toggleIndexDisplay}>Swap Nodes</button>\n                    &nbsp;&nbsp;\n                    <button className=\"save-btn\" onClick={this.saveAsPDF}>Save as PDF</button>\n                    &nbsp;&nbsp;\n                    <button ref=\"refresh\" onClick={this.props.refresh}>Refresh</button>\n                    &nbsp;&nbsp;\n                    <Checkbox text=\"Display Theta\" onChange={this.toggleTheta} checked={this.state.DisplayTheta} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Canvas;","import React from 'react'\nimport Canvas from './Canvas'\nimport Checkbox from './Checkbox'\n\nclass Home extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            uploaded: false, \n            trees: [],\n            RelScaling : true,\n            Cladogram : false,\n            AbsScaling : false,\n            currLen : 0\n        }\n        this.CurrFile = null;\n        this.currFileLength = 0;\n        this.previousFileLen = 0;\n        this.past =0;\n    }\n\n    handleUpload = (ev) => {\n        if( window.File && window.FileReader && window.FileList && window.Blob ){\n            var reader = new FileReader();\n            var file = document.querySelector('input[type=file]').files[0];\n            var textFile = /text.*/;\n            if(file){\n                if(file.type.match(textFile) && !file.type.match(/text\\/javascript/)) // .js file is also considered a text file (try console.log(file.type));\n                {\n                    reader.onload =  (event) => {\n                        if(this.varifyInputFile(event.target.result.split(\"\\n\"))){\n                            this.setState({\n                                trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                                uploaded: true,                              // switch upload status -> also triggers the actual drawing of the tree\n                                currLen : event.target.result.split(\"\\n\").length\n                            });\n                            this.setState({currLen: event.target.result.split(\"\\n\").length}); \n                            this.past = this.state.currLen;\n                        }\n                        else{\n                            console.log(\"bad input\");\n                            this.forceUpdate();\n                        }\n                    }\n                    this.CurrFile = file; // for refresh purposes\n                    reader.readAsText(file);\n                }\n                else {\n                    alert(\"Upload was not a .txt file\");\n                }\n            }\n        }\n        else {\n            alert(\"Your browswer is too old for HTML5 file uploads. Please update.\");\n        }\n    }\n\n    alterUpload = () => {\n        // var filetoLoad = document.getElementById(\"f\").files[0]\n        var filetoLoad = this.refs.f.files[0];\n\n        var reader = new FileReader();\n        this.FILE = null\n        reader.onload = (ev) => {\n            var text = ev.target.result;\n            this.FILE = text.split(\"n\")\n            console.log(text.split(\"\\n\").length)\n        }\n\n        reader.readAsText(filetoLoad)\n    }\n\n    alterRefresh = (f) => {\n        var filetoLoad = this.refs.f.files[0];\n        var reader = new FileReader();\n        reader.onload = (ev) => {\n            var text = ev.target.result;\n            console.log(text.split(\"\\n\").length)\n        }\n\n        reader.readAsText(filetoLoad)\n    }\n\n    handleRefresh = (event) =>{\n        if(this.CurrFile!==null){\n            var reader = new FileReader(); \n            var file = document.querySelector('input[type=file]').files[0];\n            console.log(this.state.currLen)\n            if(file.type.match(/text.*/) && !file.type.match(/text\\/javascript/)) // .js file is also considered a text file (try console.log(file.type));\n            {\n                reader.onload =  (event) => {\n                    if(this.varifyInputFile(event.target.result.split(\"\\n\"))){\n                        console.log(\"hiya\")\n                        this.setState({\n                            trees : event.target.result.split(\"\\n\"),    // loads data into state  \n                            uploaded: true,                              // switch upload status -> also triggers the actual drawing of the tree\n                            currLen : event.target.result.split(\"\\n\").length\n                        });\n                        console.log(this.state.currLen);\n                        this.logDiffLength();\n                        this.past = this.state.currLen;\n                    }\n                }\n                reader.readAsText(file);\n            }\n            else{\n                alert(\"Uploaded file is not a .txt\")\n            }\n        }\n    }\n\n    logDiffLength = () => {\n        if(this.past !== this.state.currLen){\n            if(this.past < this.state.currLen){\n                // console.log(\"yolomemao\")\n                // alert(`New lines added to file.\\nOld Length: ${this.past}\\nNew Length: ${this.state.currLen}\\nAdded ${this.state.currLen - this.past} new lines to the file.`);\n            }\n            else{\n                // alert(`Seems like you deleted some lines in your file! That doesn't seem right.\\nPlease check your input file again`);\n            }\n        }\n    }\n\n    handleRelScalingChange = (ev)=> {\n        this.setState({\n            RelScaling: true, \n            Cladogram: false, \n            AbsScaling: false\n        });\n    }\n\n    handleCladogramChange = (ev) => {\n        this.setState({\n            Cladogram : true,\n            RelScaling: false,\n            AbsScaling: false\n        });\n    }\n\n    handleAbsScaling = (ev) => {\n        this.setState({\n            AbsScaling : true, \n            Cladogram: false,\n            RelScaling: false\n        })\n    }\n\n    varifyInputFile = (inputVect) => {\n        let returnString =\"\";\n        let badInput = false;\n\n        for(let i = 0; i < inputVect.length-1; i++){\n            let string = inputVect[i].replace(/(\\s[#]\\d+\\.\\d+)/g, \"\");\n\n            //1. paranthesis test \n            if( string.match(/(\\()/g).length !== string.match(/(\\))/g).length ){\n                returnString+=(`Mismatch parenthesis at line ${i+1}\\n`);\n                badInput = true;\n            }\n            \n            //2. comma to species name check\n            if( string.match(/(?=\\D)(\\w+)/g).length !== (string.match(/,/g).length +1) ){\n                returnString+=(`Incorrect tree depth at line ${i+1}\\n`);\n                badInput = true;\n            }\n\n            //3. species name and branchlength test \n            if( string.match(/(?=\\D)(\\w+)/g).length !== string.match(/(?=\\D)(\\w+)(:\\s\\d+\\.\\d+)/g).length ){\n                returnString+=(`Mismatch number of species and brlength at line ${i+1}\\n`);\n                badInput = true;\n            }\n        }\n        if(badInput){\n            alert(returnString);\n            return false;\n        }\n        return true;\n    }\n\n    render(){\n        return(\n            <div style={{paddingLeft:30, paddingTop:0, paddingRight:30, paddingBottom:30}}> \n                <div className='title'>BBP TREE VISUALIZER</div> \n                <div>&nbsp;</div>\n                <Canvas \n                    isFireFox = {this.isFireFox} \n                    received={this.state.uploaded} \n                    trees = {this.state.trees} \n                    clado = {this.state.Cladogram} \n                    relscal = {this.state.RelScaling} \n                    refresh = {this.handleRefresh}\n                />\n                <label className=\"file-inp\">\n                    <input ref =\"f\" type ='file' onChange={this.handleUpload} autoComplete=\"off\"/>\n                </label>\n                <div className=\"scaling-btn-group\">\n                    <Checkbox text=\"Relative Scaling\" onChange={this.handleAbsScaling} checked={this.state.AbsScaling}/>\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <Checkbox text=\"Absolute Scaling\" onChange={this.handleRelScalingChange} checked={this.state.RelScaling} />\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <Checkbox text=\"Cladogram\" onChange={this.handleCladogramChange} checked={this.state.Cladogram} />\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}